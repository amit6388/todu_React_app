[{"C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\index.js":"1","C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\App.jsx":"2","C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\ControlPannel.jsx":"3","C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\Tasks.jsx":"4"},{"size":197,"mtime":1677919039971,"results":"5","hashOfConfig":"6"},{"size":697,"mtime":1678092640356,"results":"7","hashOfConfig":"6"},{"size":3187,"mtime":1677919039930,"results":"8","hashOfConfig":"6"},{"size":5426,"mtime":1677921864830,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"12ma6",{"filePath":"13","messages":"14","suppressedMessages":"15","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"19"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\index.js",[],[],"C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\App.jsx",[],[],"C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\ControlPannel.jsx",["24","25","26"],[],"import React from \"react\";\r\nimport { useState } from \"react\";\r\nimport {Link ,useNavigate} from 'react-router-dom'\r\nexport default function ControlPannel(){\r\n    const [name,setName]=useState(\"\")\r\n    const [email,setEmail]=useState(\"\")\r\n    const [ mob,setMob]=useState(\"\")\r\n    const [pass,setPass]=useState(\"\")\r\n    const [ lemail,setLemail]=useState(\"\")\r\n    const [ lpass,setLpass]=useState(\"\")\r\n   const   navigate=useNavigate()\r\n    function register(e){\r\n        e.preventDefault()\r\n         const newObj={\r\n            name:name,\r\n            email:email,\r\n            mob:mob,\r\n            pass:pass\r\n             }\r\n      var data=JSON.parse(window.localStorage.getItem(\"register\"))\r\n      if(data==null)\r\n      data=[newObj]\r\n      else\r\n       data.push(newObj)\r\n window.localStorage.setItem(\"register\",JSON.stringify(data))\r\n            setEmail(\"\")\r\n            setName('')\r\n            setMob('')\r\n            setPass('')\r\n    }\r\n     function login(e){\r\n        e.preventDefault()\r\n\r\n        var data=JSON.parse(window.localStorage.getItem(\"register\"))\r\n        data.forEach((data)=>{\r\n         if(data.email==lemail && data.pass==lpass){\r\n          \r\n           window.localStorage.setItem(\"id\",JSON.stringify(data.email))\r\n           navigate('/task')\r\n        }\r\n\r\n        })\r\n     }\r\n    return(\r\n       <div className=\"container\">\r\n            <div className=\"row\">\r\n                \r\n                <div className=\"col-sm-2\"></div>\r\n                <div className=\"col-sm-4\">\r\n                <h1 className=\"text-center\">Login Here!</h1>\r\n                    <form onSubmit={login}>\r\n                        <label>UserName</label><br/>\r\n                        <input  type='email' onChange={(e)=>setLemail(e.target.value)} className=\"form-control\"/>\r\n                        <label>Password</label>:<br/>\r\n                        <input  type='password' onChange={(e)=>setLpass(e.target.value)} className=\"form-control\"/><br/>\r\n                        <input type='submit' className=\"btn btn-info\" value='Login' />\r\n                    </form>\r\n                </div>\r\n                <div className=\"col-sm-4\">\r\n                <h1 className=\"text-center\">Register Here!</h1>\r\n                    <form onSubmit={register}>\r\n                        <label>Name</label><br/>\r\n                        <input  type='text' onChange={(e)=>setName(e.target.value)} className=\"form-control\"/>\r\n                        <label>Mobile</label><br/>\r\n                        <input  type='number'  onChange={(e)=>setMob(e.target.value)}  className=\"form-control\"/>\r\n                        <label>email</label><br/>\r\n                        <input  type='email'  onChange={(e)=>setEmail(e.target.value)}  className=\"form-control\"/>\r\n                        <label>Password</label><br/>\r\n                        <input  type='password'  onChange={(e)=>setPass(e.target.value)}  className=\"form-control\"/><br/>\r\n                        <input type='submit' className=\"btn btn-info\" value='register' />\r\n                        \r\n                    </form>\r\n                </div>\r\n                <div className=\"col-sm-2\"></div>\r\n            </div>\r\n       </div>\r\n    )\r\n}","C:\\Users\\amitp\\Desktop\\react\\demo\\vevsis\\src\\Tasks.jsx",["27","28","29","30","31","32","33"],[],"import React from \"react\";\r\nimport { Link } from 'react-router-dom'\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nexport default function Tasks() {\r\n    const [title, setTitle] = useState(\"\")\r\n    const [status, setStatus] = useState(\"\")\r\n\r\n    const [des, setDes] = useState(\"\")\r\n    const email = window.localStorage.getItem('id')\r\n    // useEffect(()=>{\r\n    //     window.location.reload(true)\r\n    // },[])\r\n\r\n    function uploadTask() {\r\n\r\n        const newObj = {\r\n            title: title,\r\n            email: email,\r\n            des: des,\r\n            status: status\r\n\r\n        }\r\n        var data = JSON.parse(window.localStorage.getItem(\"task\"))\r\n        if (data == null)\r\n            data = [newObj]\r\n        else\r\n            data.push(newObj)\r\n        window.localStorage.setItem(\"task\", JSON.stringify(data))\r\n        setTitle(\"\")\r\n        setDes(\"\")\r\n\r\n    }\r\n    const show = JSON.parse(window.localStorage.getItem(\"task\"))\r\n    function logout() {\r\n        window.localStorage.removeItem('id')\r\n    }\r\n\r\n\r\n    let handleComplete = (id) => {\r\n        var data = JSON.parse(window.localStorage.getItem(\"task\"))\r\n        data[id].status = 'pending'\r\n        window.localStorage.setItem(\"task\", JSON.stringify(data))\r\n        window.location.reload(true)\r\n    }\r\n    let handlePending = (id) => {\r\n        var data = JSON.parse(window.localStorage.getItem(\"task\"))\r\n        data[id].status = 'completed'\r\n        window.localStorage.setItem(\"task\", JSON.stringify(data))\r\n        window.location.reload(true)\r\n    }\r\n    return (\r\n        <div className=\"container\">\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-4\"></div>\r\n                <div className=\"col-sm-4\">\r\n                    <h1 className=\"text-center\"><h1 style={{ color: \"red\" }}>welcome  </h1><br />Create Task...<Link to={'/'}> <button onClick={logout} className=\"btn btn-outline-info\">logout</button><br /> </Link> </h1>\r\n                    <form>\r\n                        <label>Title</label><br />\r\n                        <input type='text' onChange={(e) => setTitle(e.target.value)} className=\"form-control\" />\r\n                        <label>Description</label>:<br />\r\n                        <textarea className=\"form-control\" onChange={(e) => setDes(e.target.value)} ></textarea> <br />\r\n                        <label>Status</label> : <select onChange={(e) => setStatus(e.target.value)}  >\r\n                            <option>select</option>\r\n                            <option value={'pending'}>Completed</option>\r\n                            <option value={'completed'}>Pending</option>\r\n                        </select> <br /><br />\r\n                        <button onClick={uploadTask} className=\"btn btn-success\">submit</button>\r\n                    </form>\r\n                </div>\r\n                <div className=\"col-sm-4\">  </div>\r\n            </div>\r\n            <br />\r\n            <div className=\"row\">\r\n                <div className=\"col-sm-6 p-4\">\r\n                    <h1 style={{ color: \"red\" }}>Completed</h1><br />\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"text-bg-dark\"><tr><th>title</th> <th>Description</th> <th> status</th></tr></thead>\r\n                        <tbody>\r\n\r\n                            {show == null ? <span>no records found</span> : show.map((data, index) => {\r\n\r\n                                if (data.email == email && data.status == 'pending') {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{data.title}</td>\r\n                                            <td>{data.des}</td>\r\n                                            <td><button className=\"btn btn-outline-info\" onClick={() => { handlePending(index) }}> {data.status}</button></td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n                <div className=\"col-sm-6 p-4\">\r\n                    <h1 style={{ color: \"red\" }}>Pending</h1>\r\n                    <table className=\"table table-bordered\">\r\n                        <thead className=\"text-bg-dark\"><tr><th>title</th> <th>Description</th> <th> status</th></tr></thead>\r\n                        <tbody>\r\n\r\n                            {show == null ? <span>no records found</span> : show.map((data, index) => {\r\n\r\n                                if (data.email == email && data.status == 'completed') {\r\n                                    return (\r\n                                        <tr key={index}>\r\n                                            <td>{data.title}</td>\r\n                                            <td>{data.des}</td>\r\n                                            <td><button className=\"btn btn-outline-info\" onClick={() => { handleComplete(index) }}> {data.status}</button></td>\r\n                                        </tr>\r\n                                    )\r\n                                }\r\n                            })}\r\n                        </tbody>\r\n                    </table>\r\n                </div>\r\n\r\n            </div>\r\n            <div className=\"row\">\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        </div>\r\n    )\r\n}",{"ruleId":"34","severity":1,"message":"35","line":3,"column":9,"nodeType":"36","messageId":"37","endLine":3,"endColumn":13},{"ruleId":"38","severity":1,"message":"39","line":36,"column":23,"nodeType":"40","messageId":"41","endLine":36,"endColumn":25},{"ruleId":"38","severity":1,"message":"39","line":36,"column":44,"nodeType":"40","messageId":"41","endLine":36,"endColumn":46},{"ruleId":"34","severity":1,"message":"42","line":4,"column":10,"nodeType":"36","messageId":"37","endLine":4,"endColumn":19},{"ruleId":"43","severity":1,"message":"44","line":81,"column":100,"nodeType":"45","messageId":"46","endLine":81,"endColumn":102},{"ruleId":"38","severity":1,"message":"39","line":83,"column":48,"nodeType":"40","messageId":"41","endLine":83,"endColumn":50},{"ruleId":"38","severity":1,"message":"39","line":83,"column":72,"nodeType":"40","messageId":"41","endLine":83,"endColumn":74},{"ruleId":"43","severity":1,"message":"44","line":102,"column":100,"nodeType":"45","messageId":"46","endLine":102,"endColumn":102},{"ruleId":"38","severity":1,"message":"39","line":104,"column":48,"nodeType":"40","messageId":"41","endLine":104,"endColumn":50},{"ruleId":"38","severity":1,"message":"39","line":104,"column":72,"nodeType":"40","messageId":"41","endLine":104,"endColumn":74},"no-unused-vars","'Link' is defined but never used.","Identifier","unusedVar","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","'useEffect' is defined but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd"]